import Component from 'ember-component';
import inject from 'ember-service/inject';
import { next } from 'ember-runloop';
import hbs from 'htmlbars-inline-precompile';

/**
 * This component is used for any header that should include a click-to-copy scroll target.
 * For any header in a Fountainhead Guide or Docblock, the
 * {{c-l class='parseMarkdown'}} method automatically handles creating instances
 *  by adding new render
 * rules for the `heading_open` and `heading_close` tokens generated by `markdown-it`.
 *
 * This automatically creates headers with fragment ids and
 * click to copy targets for grabbing the anchor for any header in your documentation!
 *
 * The `heading_open` token contains the HTML tag element for each header, it is
 * passed in as the `tagName` property, which creates the correct header element.
 *
 * The {{c-l class='FountainheadCopyableLinkTo'}} component returns a text value
 * matching the href to copy, and is invoked differently depending on if the consuming
 * app is using hash routing or not. If not, we use hash fragment ids like a normal
 * web page. If they are, a query param `id` is used. The
 * {{c-l class='Fountainhead'}} service handles checking which target to use when
 * scrolling to ids on page 'load' _(which is actually any page component's
 * `didInsertElement` hook)_.
 * @class FounatianheadHeader
 * @constructor
 * @extends Ember.Component
 */
export default Component.extend({
  fountainhead: inject(),

  // Passed Properties
  // ---------------------------------------------------------------------------
  /**
   * Specific element id is passed to click-to-copy elements in the template.
   * @property elementId
   * @type {string}
   */
  elementId: '',
  /**
   * The `tagName` is passed to specify header size.
   * @property tagName
   * @type {string}
   */
  tagName: '',

  // Properties
  // ---------------------------------------------------------------------------
  /**
   * @property classNames
   * @type {string}
   * @default 'fh-header'
   */
  classNames: 'fh-header',

  // Method
  // ---------------------------------------------------------------------------
  /**
   * Copies the current url to the clipboard by updating the value of the off-screen
   * input to the url, selecting it and then calling exec copy.
   * @method _copyToClipboard
   */
  _copyToClipboard() {
    const copyInput = this.$(`#${this.get('elementId')}-input`);
    copyInput.val(location.href);
    copyInput.select();

    document.execCommand('copy');

    // Show the copied message and hide after 1.5s
    this.set('_active', true);
    setTimeout(() => {
      if (!(this.get('isDestroyed'))) { this.set('_active', false); }
    }, 1500);
  },

  // Actions
  // ---------------------------------------------------------------------------
  actions: {
    /**
     * Copy to clipboard method must run in next event loop so that the anchor click
     * can bubble and the browser can update the url before we grab it and copy it.
     * @method handleCopy
     * @action
     */
    handleCopy() {
      next(this, '_copyToClipboard');
    }
  },

  // Layout
  // ---------------------------------------------------------------------------
  layout: hbs`
    <div class='fh-header-anchor'>
      {{! Anchor to copy url id }}
      {{#if fountainhead.meta.hashRouting}}
        {{! For Hash Location consumers, a link-to with just a query-params creates
            a link to this page with the correct &id= query param }}
        {{#link-to (query-params id=elementId) click=(action 'handleCopy')}}
          {{fountainhead-svg svgId='link'}}
        {{/link-to}}
      {{else}}
        <a href={{concat '#' elementId}} onclick={{action 'handleCopy'}}>
          {{fountainhead-svg svgId='link'}}
        </a>
      {{/if}}
      {{! 'Copied' message that is shown after clicking anchor copy button }}
      <div class='fh-header-copied{{if _active ' active'}}'>
        Copied
      </div>
      {{! Off screen input with injected copy value }}
      <input type='text' class='fh-header-copy-target' value='' id='{{elementId}}-input' />
    </div>
    {{! Header Text }}
    {{yield}}
  `
});
