import Component from 'ember-component';
import hbs from 'htmlbars-inline-precompile';

/**
 * Individual class property or method documentation item
 * @class FountainHead.Class.ClassItem
 * @constructor
 * @extends Ember.Component
 */
export default Component.extend({

  // Passed Properties
  // ---------------------------------------------------------------------------

  /**
   * Model backing this class item, generated by YUIDoc.
   * TODO: Document props of classItem and how they get used in template
   * @property classItem
   * @type {Object}
   */
  classItem: {},

  // Properties
  // ---------------------------------------------------------------------------
  /**
   * @property classNames
   * @type {Array}
   * @default ['fh-class-item']
   */
  classNames: ['fh-class-item'],

  // Hooks
  // ---------------------------------------------------------------------------

  /**
   * Set the unique id that the `class-items-container` expects for each class
   * item in init. Id is the `itemtype_name` and is used to scroll to the
   * item when the name is clicked in the index list panel.
   * @method init
   */
  init() {
    this._super(...arguments);
    // Set a unique anchor for this element using type and name
    this.set('elementId', `${this.get('classItem.itemtype')}_${this.get('classItem.name')}`);
  },

  // Layout
  // ---------------------------------------------------------------------------
  layout: hbs`
    {{! --------------------------------------------------------------------- }}
    {{! Item Header
    {{! --------------------------------------------------------------------- }}
    <h4 class="fh-item-header">
      {{classItem.name}}
      {{!-- <span class="item-type">{{classItem.itemtype}}</span> --}}
      {{#if classItem.params}}
        <span class="item-params">(
          {{#each classItem.params as |param index|}}
            {{if index ', '}}{{param.name}}
          {{/each}}
          )</span>
      {{/if}}
      {{#if classItem.return.type}}
        <span class="return-type">{{classItem.return.type}}</span>
      {{/if}}
      {{#if classItem.access}}
        <span class="item-access {{classItem.access}}">{{classItem.access}}</span>
      {{/if}}
    </h4>

    {{#if classItem.file}}
      <p class="small italics">Defined in:
        {{#link-to 'docs.files' classItem.srcFileId (query-params line=classItem.line)}}
          {{classItem.file}}:{{classItem.line}}
        {{/link-to}}
      </p>
    {{/if}}

    {{! TODO: Where is this coming from? }}
    {{#if classItem.inherited}}
      <p class="small">Inherited from {{classItem.inherited}}</p>
    {{/if}}

    {{#if classItem.description}}
      {{fountain-head/shared/runtime-description description=classItem.description}}
    {{/if}}

    {{#if classItem.params}}
      <h5>Parameters</h5>
      <ul>
        {{#each classItem.params as |param|}}
          <li>
            <strong>
              {{! Surround optional params with brackets to denote they're optional}}
              {{! TODO: Visual flag for optional? }}
              {{#if param.optional}}
                [{{param.name}}]
              {{else}}
                {{param.name}}
              {{/if}}
              {{#if param.type}}<span class="param-type">{{param.type}}</span>{{/if}}
            </strong>
            <br />
            {{param.description}}
          </li>
        {{/each}}
      </ul>
    {{/if}}

    {{#if classItem.default}}
      <p><strong>Default: </strong> <code>{{classItem.default}}</code></p>
    {{/if}}

    {{#if classItem.return}}
      <h4>Returns:</h4>
      {{#if classItem.return.description}}
        <p>{{classItem.return.description}}</p>
      {{/if}}
      {{#if classItem.return.type}}
        <p class="return-type">{{classItem.return.type}}</p>
      {{/if}}
    {{/if}}
  `
});
