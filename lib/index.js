#!/usr/bin/env node

'use strict';
const fs = require('fs');
const path = require('path');
const execSync = require('child_process').exec;

const decorateConfig = require('./decorate-config');
const clean = require('./clean');
const generateFountainheadData = require('./generate-fountainhead-data');


// ========================================================
// Pre Docs Generation Validation
// ========================================================

let config;
let packageJSON = require(path.resolve('package.json'));

// Configuration is optional, load in a try/catch to handle possible error
try {
  config = require(path.resolve('fountainhead.js'));
} catch(ex) {
  config = {};
}

// Validate config output
const decoratedConfig = decorateConfig(config, packageJSON);
let output = decoratedConfig.output;
let entry = decoratedConfig.entry;

// Validate and clean output dir
clean(output);


// ========================================================
// Exec Docs Generation
// ========================================================

// Generate yuidoc data.json file
execSync(`./node_modules/.bin/yuidoc ${entry} --parse-only --quiet --outdir ${output.path}/tmp`, function(err) {
  if (err !== null) { return console.warn('exec error: ' + err); }

  // Attempt to read and parse yuidoc generated json
  let yuidocGeneratedData;
  try {
    yuidocGeneratedData = fs.readFileSync(path.join(output.path, 'tmp', 'data.json'), { encoding: 'utf8' });
    yuidocGeneratedData = JSON.parse(yuidocGeneratedData);
  } catch(ex) {
    console.warn('Unable to parse docs JSON');
  }

  // Generate fountainhead json data using project configuration and yuidoc generated raw data
  generateFountainheadData(decoratedConfig, yuidocGeneratedData);

  // Cleanup tmp data generated by yuidoc command
  fs.unlink(path.resolve(output.path, 'tmp', 'data.json'));
  fs.rmdir(path.resolve(output.path, 'tmp'));
});
