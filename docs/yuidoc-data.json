{
  "project": {},
  "files": {
    "addon/components/fountain-head/docs/class/class-item.js": {
      "name": "addon/components/fountain-head/docs/class/class-item.js",
      "modules": {},
      "classes": {
        "FountainHead.Class.ClassItem": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/class/class-items-container.js": {
      "name": "addon/components/fountain-head/docs/class/class-items-container.js",
      "modules": {},
      "classes": {
        "FountainHead.Class.ClassItemsContainer": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/class/header.js": {
      "name": "addon/components/fountain-head/docs/class/header.js",
      "modules": {},
      "classes": {
        "FountainHead.Class.Header": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/class/meta.js": {
      "name": "addon/components/fountain-head/docs/class/meta.js",
      "modules": {},
      "classes": {
        "FountainHead.Class.Meta": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/index/landing.js": {
      "name": "addon/components/fountain-head/docs/index/landing.js",
      "modules": {},
      "classes": {
        "FountainHead.Header": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/class.js": {
      "name": "addon/components/fountain-head/docs/class.js",
      "modules": {},
      "classes": {
        "FountainHead.Class": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/file.js": {
      "name": "addon/components/fountain-head/docs/file.js",
      "modules": {},
      "classes": {
        "FountainHead.File": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/footer.js": {
      "name": "addon/components/fountain-head/docs/footer.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/github.js": {
      "name": "addon/components/fountain-head/docs/github.js",
      "modules": {},
      "classes": {
        "FountainHead.Docs.Github": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/header.js": {
      "name": "addon/components/fountain-head/docs/header.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/module.js": {
      "name": "addon/components/fountain-head/docs/module.js",
      "modules": {},
      "classes": {
        "FountainHead.Module": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs/sidebar.js": {
      "name": "addon/components/fountain-head/docs/sidebar.js",
      "modules": {},
      "classes": {
        "FountainHead.Docs.Sidebar": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/shared/fountainhead-svg.js": {
      "name": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "modules": {},
      "classes": {
        "FountainHead.Shared.CoreSVG": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/shared/runtime-description.js": {
      "name": "addon/components/fountain-head/shared/runtime-description.js",
      "modules": {},
      "classes": {
        "FountainHead.Shared.RuntimeDescription": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/components/fountain-head/docs.js": {
      "name": "addon/components/fountain-head/docs.js",
      "modules": {},
      "classes": {
        "FountainHead.Docs": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/helpers/eq.js": {
      "name": "addon/helpers/eq.js",
      "modules": {},
      "classes": {
        "Helper.Eq": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/routes/docs/classes.js": {
      "name": "addon/routes/docs/classes.js",
      "modules": {},
      "classes": {
        "Docs.Classes": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/routes/docs/files.js": {
      "name": "addon/routes/docs/files.js",
      "modules": {},
      "classes": {
        "Docs.Files": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/routes/docs/modules.js": {
      "name": "addon/routes/docs/modules.js",
      "modules": {},
      "classes": {
        "Docs.Modules": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/services/fountainhead.js": {
      "name": "addon/services/fountainhead.js",
      "modules": {},
      "classes": {
        "Fountainhead": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "addon/_module-definition.js": {
      "name": "addon/_module-definition.js",
      "modules": {
        "Addon": 1
      },
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "app/instance-initializers/fountainhead-routes.js": {
      "name": "app/instance-initializers/fountainhead-routes.js",
      "modules": {
        "App": 1
      },
      "classes": {
        "FountainheadRoutes": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "blueprints/ember-fountainhead/index.js": {
      "name": "blueprints/ember-fountainhead/index.js",
      "modules": {
        "Blueprints": 1
      },
      "classes": {
        "EmberFountainhead.Index": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/data-types/_module.js": {
      "name": "lib/data-types/_module.js",
      "modules": {
        "Lib": 1
      },
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "lib/data-types/generate-classes.js": {
      "name": "lib/data-types/generate-classes.js",
      "modules": {},
      "classes": {
        "DataTypes.GenerateClasses": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/data-types/generate-modules.js": {
      "name": "lib/data-types/generate-modules.js",
      "modules": {},
      "classes": {
        "DataTypes.GenerateModules": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/data-types/generate-src-file.js": {
      "name": "lib/data-types/generate-src-file.js",
      "modules": {},
      "classes": {
        "DataTypes.GenerateSrcFile": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/create-dirs.js": {
      "name": "lib/create-dirs.js",
      "modules": {},
      "classes": {
        "createDirs": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/decorate-config.js": {
      "name": "lib/decorate-config.js",
      "modules": {},
      "classes": {
        "decorateConfig": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/generate-fountainhead-data.js": {
      "name": "lib/generate-fountainhead-data.js",
      "modules": {},
      "classes": {
        "generateFountainheadData": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/index.js": {
      "name": "lib/index.js",
      "modules": {},
      "classes": {
        "Index": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "lib/parse-markdown.js": {
      "name": "lib/parse-markdown.js",
      "modules": {},
      "classes": {
        "parseMarkdown": 1
      },
      "fors": {},
      "namespaces": {}
    }
  },
  "modules": {
    "Addon": {
      "name": "Addon",
      "submodules": {},
      "elements": {},
      "classes": {
        "FountainHead.Class.ClassItem": 1,
        "FountainHead.Class.ClassItemsContainer": 1,
        "FountainHead.Class.Header": 1,
        "FountainHead.Class.Meta": 1,
        "FountainHead.Header": 1,
        "FountainHead.Class": 1,
        "FountainHead.File": 1,
        "FountainHead.Docs.Github": 1,
        "FountainHead.Module": 1,
        "FountainHead.Docs.Sidebar": 1,
        "FountainHead.Shared.CoreSVG": 1,
        "FountainHead.Shared.RuntimeDescription": 1,
        "FountainHead.Docs": 1,
        "Helper.Eq": 1,
        "Docs.Classes": 1,
        "Docs.Files": 1,
        "Docs.Modules": 1,
        "Fountainhead": 1
      },
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "addon/services/fountainhead.js",
      "line": 7,
      "description": "Addon module contains the components, routes and utils for generating docs\napplication."
    },
    "App": {
      "name": "App",
      "submodules": {},
      "elements": {},
      "classes": {
        "FountainheadRoutes": 1
      },
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "app/instance-initializers/fountainhead-routes.js",
      "line": 11,
      "description": "Fountainhead's routes are automatically mounted to the consuming application's\nrouter through an `instance-initializer`. We're currently directly importing\nthe consuming application's router by declaring this initializer in the `/app`\ndirectory instead of the `/addon` directory."
    },
    "Blueprints": {
      "name": "Blueprints",
      "submodules": {},
      "elements": {},
      "classes": {
        "EmberFountainhead.Index": 1
      },
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "blueprints/ember-fountainhead/index.js",
      "line": 14,
      "description": "When an addon has an `index.js` file under `/blueprints/ADDON_NAME`, Ember\nCLI will call the hooks defined there. We use this to handle anything that\nneeds to be updated in the consuming application only once during the addon\nsetup."
    },
    "Lib": {
      "name": "Lib",
      "submodules": {},
      "elements": {},
      "classes": {
        "DataTypes.GenerateClasses": 1,
        "DataTypes.GenerateModules": 1,
        "DataTypes.GenerateSrcFile": 1,
        "createDirs": 1,
        "decorateConfig": 1,
        "generateFountainheadData": 1,
        "Index": 1,
        "parseMarkdown": 1
      },
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "lib/parse-markdown.js",
      "line": 24,
      "description": "Modules in the `./lib` directory handle generating -> parsing -> decorating ->\nsaving all data required for Fountainhead. Fountainhead is backed by REST APIs\nrather than static file generation. Each module, class and file are saved as\nJSON fetched on demand by the client.\n\nSee this module for details/classes on the Node data generation application.\nSee below for a high level overview of the flow of the application through\nthe related modules.\n\n## Lib Classes Overview:\n\n#### Validation && Preparation\n- `index.js`: Primary entry point to Node application\n- `decorate-config`: Validate and merge addon configs, package JSON and default configs\n- `create-dirs`: Create directories required for JSON files\n\n#### Generation && Decoration\n- `generate-fountainhead-data`: Coordinates parsing raw YUIDoc using `data-types` modules\n- `data-types/generate-modules`: Parse && decorate raw modules data\n- `data-types/generate-classes`: Parse && decorate raw class && class items data\n- `data-types/generate-file`: Parse && decorate source files\n- `parse-markdown`: Called for every description, parses markdown contents to HTML"
    }
  },
  "classes": {
    "FountainHead.Class.ClassItem": {
      "name": "FountainHead.Class.ClassItem",
      "shortname": "FountainHead.Class.ClassItem",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/class/class-item.js",
      "line": 4,
      "description": "Individual class property or method documentation item",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Class.ClassItemsContainer": {
      "name": "FountainHead.Class.ClassItemsContainer",
      "shortname": "FountainHead.Class.ClassItemsContainer",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 7,
      "description": "Tab container for the class' documentation items. Component handles running\na controlled instance of `core-tabs` by tracking `activeTab` internally and\npassing `tabsChanged` to the `core-tabs` instance.\n\nThe active tab is reset to the index panel anytime that the `name` (of the\nclass) changes.",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Class.Header": {
      "name": "FountainHead.Class.Header",
      "shortname": "FountainHead.Class.Header",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/class/header.js",
      "line": 4,
      "description": "Docs Page class header. Contains class name with a link to source file for\nclass.",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Class.Meta": {
      "name": "FountainHead.Class.Meta",
      "shortname": "FountainHead.Class.Meta",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 4,
      "description": "Creates meta information for a documentation class.\n\nTODO: Document which YUIDoc tags generate what meta data",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Header": {
      "name": "FountainHead.Header",
      "shortname": "FountainHead.Header",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/index/landing.js",
      "line": 4,
      "description": "The landing message is rendered on the `/docs/index` route and shows either a\nhelpful getting started or docs related message depending on if the user has\ngenerated docs or not. We know by passing in the meta information in the\n`/docs/index` template",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Class": {
      "name": "FountainHead.Class",
      "shortname": "FountainHead.Class",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/class.js",
      "line": 4,
      "description": "Fountainhead `/doc/class` page component",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.File": {
      "name": "FountainHead.File",
      "shortname": "FountainHead.File",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/file.js",
      "line": 4,
      "description": "Fountainhead `/doc/file` page component",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Docs.Github": {
      "name": "FountainHead.Docs.Github",
      "shortname": "FountainHead.Docs.Github",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "FountainHead.Docs"
      ],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/github.js",
      "line": 4,
      "description": "Github octocat logo in the top right corner.",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Module": {
      "name": "FountainHead.Module",
      "shortname": "FountainHead.Module",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/module.js",
      "line": 4,
      "description": "Fountainhead `/doc/module` page component\nThere's nothing here yet.",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Docs.Sidebar": {
      "name": "FountainHead.Docs.Sidebar",
      "shortname": "FountainHead.Docs.Sidebar",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "FountainHead.Docs"
      ],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs/sidebar.js",
      "line": 5,
      "description": "Wrapper component for the sidebar components. Expects the entire docs meta\nobject.",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Shared.CoreSVG": {
      "name": "FountainHead.Shared.CoreSVG",
      "shortname": "FountainHead.Shared.CoreSVG",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "line": 4,
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Shared.RuntimeDescription": {
      "name": "FountainHead.Shared.RuntimeDescription",
      "shortname": "FountainHead.Shared.RuntimeDescription",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 6,
      "description": "Generates a description during runtime by using HTMLBars to compile any\nstring to a partial. This allows us to create descriptions form JSON\nresponses with components inside of them.",
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "FountainHead.Docs": {
      "name": "FountainHead.Docs",
      "shortname": "FountainHead.Docs",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/components/fountain-head/docs.js",
      "line": 5,
      "description": "Fountainhead `/doc` page component serves as the wrapping template for all of\nFountainhead. The `outlet` for the route is yielded by this component, which\nis how we use components to handle rendering all of our markup, even with\nsubroutes.\n\nBecause we want the default setup of Fountainhead to look like it's own app\nwe render everything in a `fh-page-in-page-wrapper` wrapper which is position\nfixed to cover the entire screen. This allows us to have our own header and\nfooter even if a consuming application has one in their `application.hbs`\ntemplate.\n\nThe `fountainhead` service is the primary store for the addon and handles\nfetching the meta data for the docs.",
      "uses": [
        "FountainHead.Docs.Github",
        "FountainHead.Docs.Sidebar"
      ],
      "is_constructor": 1,
      "extends": "Ember.Component"
    },
    "Helper.Eq": {
      "name": "Helper.Eq",
      "shortname": "Helper.Eq",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/helpers/eq.js",
      "line": 3,
      "description": "Helper to compare two values to see if they are equal. Values must be of the same type.",
      "is_constructor": 1,
      "params": [
        {
          "name": "args",
          "description": "Positional args passed to helper should be compared",
          "type": "Array"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      }
    },
    "Docs.Classes": {
      "name": "Docs.Classes",
      "shortname": "Docs.Classes",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/routes/docs/classes.js",
      "line": 5,
      "description": "Route handles fetching data for an individual class.",
      "is_constructor": 1,
      "extends": "Ember.Route"
    },
    "Docs.Files": {
      "name": "Docs.Files",
      "shortname": "Docs.Files",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/routes/docs/files.js",
      "line": 5,
      "description": "Route handles fetching data for a source file.",
      "is_constructor": 1,
      "extends": "Ember.Route"
    },
    "Docs.Modules": {
      "name": "Docs.Modules",
      "shortname": "Docs.Modules",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/routes/docs/modules.js",
      "line": 5,
      "description": "Route to be created for handling modules",
      "is_constructor": 1,
      "extends": "Ember.Route"
    },
    "Fountainhead": {
      "name": "Fountainhead",
      "shortname": "Fountainhead",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Addon",
      "file": "addon/services/fountainhead.js",
      "line": 7,
      "description": "Fountainhead application service.",
      "is_constructor": 1,
      "extends": "Ember.Service"
    },
    "FountainheadRoutes": {
      "name": "FountainheadRoutes",
      "shortname": "FountainheadRoutes",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "App",
      "namespace": "",
      "file": "app/instance-initializers/fountainhead-routes.js",
      "line": 11,
      "description": "Automagically mount Fountainhead routes through an `instance-initializer`.\n\nNOTE: this initializer needs to be in the `/app` directory so that the the\nconsuming application's router can be directly imported and manipulated.\n\nTODO: See if we can use some kind of lookup to do this from within an\ninitializer in the `/addon` directory",
      "is_constructor": 1
    },
    "EmberFountainhead.Index": {
      "name": "EmberFountainhead.Index",
      "shortname": "EmberFountainhead.Index",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Blueprints",
      "namespace": "",
      "file": "blueprints/ember-fountainhead/index.js",
      "line": 14,
      "description": "Fountainhead index blueprint is used to update the consuming application's\n`.gitignore` to ignore the auto generated `vendor/feature-flags.js` file\ncreated by `ember-radical`. This file is used to create global variables if\nthe consuming application has turned off JSUglify code stripping.",
      "is_constructor": 1,
      "extends": "EmberCLI.Blueprint"
    },
    "DataTypes.GenerateClasses": {
      "name": "DataTypes.GenerateClasses",
      "shortname": "DataTypes.GenerateClasses",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "generateFountainheadData"
      ],
      "module": "Lib",
      "namespace": "",
      "file": "lib/data-types/generate-classes.js",
      "line": 4,
      "description": "Module handles decorating and compiling classes and their class items including:\n- Compiling each class item to its class\n- Creating an id for class and class src file\n- Parsing class and class item descriptions markdown to HTML",
      "is_constructor": 1,
      "params": [
        {
          "name": "classes",
          "description": "Object of raw YUIDoc classes",
          "type": "Object"
        },
        {
          "name": "classItems",
          "description": "Array of raw YUIDoc classItems",
          "type": "Object"
        }
      ],
      "return": {
        "description": "Returns object: `{ classesMeta, classesDatas }` for saving",
        "type": "Object"
      }
    },
    "DataTypes.GenerateModules": {
      "name": "DataTypes.GenerateModules",
      "shortname": "DataTypes.GenerateModules",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "generateFountainheadData"
      ],
      "module": "Lib",
      "namespace": "",
      "file": "lib/data-types/generate-modules.js",
      "line": 4,
      "description": "Handle parsing/decorating raw YUIDoc modules data including:\n- Generate meta objects for each module that can be used for the sidebar nav\n- Create an array of modules from YUIDoc object of modules for standard lib format\n- Parse module markdown description to HTML",
      "params": [
        {
          "name": "modules",
          "description": "YUIDoc raw modules object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "Returns object: `{ modulesMeta, modulesDatas }` for saving",
        "type": "Object"
      }
    },
    "DataTypes.GenerateSrcFile": {
      "name": "DataTypes.GenerateSrcFile",
      "shortname": "DataTypes.GenerateSrcFile",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "generateFountainheadData"
      ],
      "module": "Lib",
      "namespace": "",
      "file": "lib/data-types/generate-src-file.js",
      "line": 5,
      "description": "Handle syntax highlighting and creating meta information for a src file",
      "is_constructor": 1,
      "params": [
        {
          "name": "filePath",
          "description": "File filepath from class definition",
          "type": "String"
        }
      ]
    },
    "createDirs": {
      "name": "createDirs",
      "shortname": "createDirs",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Index"
      ],
      "module": "Lib",
      "namespace": "",
      "file": "lib/create-dirs.js",
      "line": 7,
      "description": "Handle creating output directories for Fountainhead data.",
      "is_constructor": 1,
      "params": [
        {
          "name": "output",
          "description": "Project output configurations",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Undefined"
      }
    },
    "decorateConfig": {
      "name": "decorateConfig",
      "shortname": "decorateConfig",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Index"
      ],
      "module": "Lib",
      "namespace": "",
      "file": "lib/decorate-config.js",
      "line": 4,
      "description": "Handle adding default values to config and validating required properties\nare present",
      "is_constructor": 1,
      "params": [
        {
          "name": "config",
          "description": "Project configuration file",
          "type": "Object"
        },
        {
          "name": "packageJSON",
          "description": "Project package.json file",
          "type": "Object"
        }
      ],
      "return": {
        "description": "Fully decorated and validated project configuration file",
        "type": "Object"
      }
    },
    "generateFountainheadData": {
      "name": "generateFountainheadData",
      "shortname": "generateFountainheadData",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Index"
      ],
      "module": "Lib",
      "namespace": "",
      "file": "lib/generate-fountainhead-data.js",
      "line": 9,
      "description": "This module handles coordinating parsing/reading/saving all of the individual\nFountainhead data files after the configs have been validated and the raw\nYUIDoc data has been generated.\n\nModule should:\n- create and populate `docsMeta` that will be saved as `meta.json`\n- generate decorated modules files\n- generate decorated class files\n- generate decorated src file files\n\nNOTE: When switching doc generation from an executable to a function call\nall file operations had to be changed to a synchronous operation b/c the ember\ncommand finishes before the async file operations are complete and the contents\nare not written to file. This can be switched back to an async method by\nassembling and returning a promise.all for all async file calls",
      "is_constructor": 1,
      "uses": [
        "DataTypes.GenerateModules",
        "DataTypes.GenerateClasses",
        "DataTypes.GenerateSrcFile"
      ],
      "params": [
        {
          "name": "config",
          "description": "Project configuration file",
          "type": "Object"
        },
        {
          "name": "yuidocJSON",
          "description": "Raw yuidoc generated documentation JSON",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Undefined"
      }
    },
    "Index": {
      "name": "Index",
      "shortname": "Index",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Lib",
      "namespace": "",
      "file": "lib/index.js",
      "line": 10,
      "description": "Fountainhead documentation data generation lib entry. Configuration is set\nthrough `fountainhead.js` file. (TODO: Add default configs to decorate-config)\nclass and link.\n\nThe entry handles:\n1. Safe require of `package.json` && `fountainhead.js` files for configs\n2. Decoration && validation of project configs\n3. Generation of raw YUIDoc JSON through YUIDoc module directly\n4. Decoration of raw data in `generate-fountainhead-data` module.\n\nThe primary module is the `generate-fountainhead-data` which handles all of\nthe decoration and file creation required for Fountainhead.",
      "is_constructor": 1,
      "uses": [
        "decorateConfig",
        "createDirs",
        "generateFountainheadData"
      ]
    },
    "parseMarkdown": {
      "name": "parseMarkdown",
      "shortname": "parseMarkdown",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "Lib",
      "namespace": "",
      "file": "lib/parse-markdown.js",
      "line": 24,
      "description": "Handle parsing markdown using [Prism](http://prismjs.com/)",
      "is_constructor": 1,
      "params": [
        {
          "name": "description",
          "description": "Markdown string to parse",
          "type": "String"
        }
      ],
      "return": {
        "description": "HTML string parsed from passed markdown",
        "type": "String"
      }
    }
  },
  "elements": {},
  "classitems": [
    {
      "file": "addon/components/fountain-head/docs/class/class-item.js",
      "line": 15,
      "description": "Model backing this class item, generated by YUIDoc.\nTODO: Document props of classItem and how they get used in template",
      "itemtype": "property",
      "name": "classItem",
      "type": "{Object}",
      "class": "FountainHead.Class.ClassItem"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-item.js",
      "line": 25,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-classitem']",
      "class": "FountainHead.Class.ClassItem"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-item.js",
      "line": 35,
      "description": "Set the unique id that the `class-items-container` expects for each class\nitem in init. Id is the `itemtype_name` and is used to scroll to the\nitem when the name is clicked in the index list panel.",
      "itemtype": "method",
      "name": "init",
      "class": "FountainHead.Class.ClassItem"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 24,
      "description": "This class' array of property documentation items.",
      "itemtype": "property",
      "name": "property",
      "type": "{Array}",
      "default": "[]",
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 31,
      "description": "This class' array of event documentation items.",
      "itemtype": "property",
      "name": "event",
      "type": "{Array}",
      "default": "[]",
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 38,
      "description": "This class' array of method documentation items.",
      "itemtype": "property",
      "name": "method",
      "type": "{Array}",
      "default": "[]",
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 45,
      "description": "Name of the class. Is checked in `didUpdateAttrs` to know if the tabs\nshould be reset to the index panel",
      "itemtype": "property",
      "name": "name",
      "type": "{string}",
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 56,
      "description": "The currently active tab. This is controlled by this component to allow\nus to change the tab whenever a documentation item is clicked in the index\npanel.",
      "itemtype": "property",
      "name": "activeTab",
      "type": "{string}",
      "default": "indexPanel",
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 65,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-tabs-container']",
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 75,
      "description": "Handle resetting tabs container to the index panel any time that this\ncomponent receives attrs. The only props passed in to this component are\nthe class items for the container, so we know if they change in any way\nthat this is the right time to update the tabs panel.\n\nNOTE: GUESS WHAT! This hook doens't only get called when passed props\nchange! There is some crazy behavior where this hook will get called ONCE\nand only ONCE when an internal property changes after the props for this\ncomponent has changed. Super weird. For now we're 'fixing' it by also\npassing in the class name and using that as a check to reset the `activeTab`",
      "itemtype": "event",
      "name": "didReceiveAttrs",
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 99,
      "description": "Action bound to each documentation item in the index panel. Clicking any\nitem will trigger this with the documentation item as an argument. Use\nthe passed doc item to:\n- Change to the panel matching the doc item type\n- Scroll to that item using the itemtype and name to construct the DOM id",
      "itemtype": "method",
      "name": "goToItem",
      "params": [
        {
          "name": "classitem",
          "description": "Backing classitem",
          "type": "Object",
          "props": [
            {
              "name": "itemtype",
              "description": "Type for item of: `method`/`property`/`event`",
              "type": "String"
            },
            {
              "name": "name",
              "description": "Name for classitem",
              "type": "String"
            }
          ]
        }
      ],
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/class-items-container.js",
      "line": 133,
      "description": "Closure action passed into the tab component. This action is called\nwhenever a tab is clicked with the id of the tab. Use this to update the\ncontrolling `activeTab` property for the tabs DDAU style.",
      "itemtype": "method",
      "name": "tabsChanged",
      "params": [
        {
          "name": "tab",
          "description": "Backing object for a given tab",
          "type": "Object",
          "props": [
            {
              "name": "elementId",
              "description": "The id of the tab, controls current tab displayed",
              "type": "String"
            }
          ]
        }
      ],
      "class": "FountainHead.Class.ClassItemsContainer"
    },
    {
      "file": "addon/components/fountain-head/docs/class/header.js",
      "line": 16,
      "description": "Src file id for this file. Used for link to for source.",
      "itemtype": "property",
      "name": "srcFileId",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Header"
    },
    {
      "file": "addon/components/fountain-head/docs/class/header.js",
      "line": 23,
      "description": "Name of the class. Is generated by the `@constructor` tag.",
      "itemtype": "property",
      "name": "name",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Header"
    },
    {
      "file": "addon/components/fountain-head/docs/class/header.js",
      "line": 34,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-page-header']",
      "class": "FountainHead.Class.Header"
    },
    {
      "file": "addon/components/fountain-head/docs/class/header.js",
      "line": 40,
      "itemtype": "property",
      "name": "tagName",
      "type": "{string}",
      "default": "'h2'",
      "class": "FountainHead.Class.Header"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 17,
      "description": "The access property is set by using either of the tags:\n- `@private`\n- `@public`\n\nThe value for access matches the tag used",
      "itemtype": "property",
      "name": "access",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 28,
      "description": "The value property is set by using the `@extends` tag. Any class used in\nan extends tag will be linked to.",
      "itemtype": "property",
      "name": "extends",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 36,
      "description": "The file property matches where the documentation for a class is declared\nin the source files. It is set automatically.",
      "itemtype": "property",
      "name": "file",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 44,
      "description": "The module property is set by using the `@module` tag. Any module used in\na module tag will be linked to.",
      "itemtype": "property",
      "name": "module",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 52,
      "description": "The line property matches the line where documentation for a class is\ndeclared in the source files. It is set automatically.",
      "itemtype": "property",
      "name": "line",
      "type": "{?number}",
      "default": "null",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 60,
      "description": "scrFile id is set by the data scripts. It is a snake case version of the\nfile path and should be used for calling for the file",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "srcFileId",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 69,
      "description": "The submodule property is set by using the `@submodule` tag. Any submodule\nused in a submodule tag will be linked to.",
      "itemtype": "property",
      "name": "submodule",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 77,
      "description": "The uses array is set by using one or more `@uses` tags. Any class used in\na uses tag will be linked to.",
      "itemtype": "property",
      "name": "uses",
      "type": "{Array}",
      "default": "[]",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 89,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array.<string>}",
      "default": "['fh-class-meta']",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/class/meta.js",
      "line": 95,
      "itemtype": "property",
      "name": "tagName",
      "type": "{string}",
      "default": "'div'",
      "class": "FountainHead.Class.Meta"
    },
    {
      "file": "addon/components/fountain-head/docs/index/landing.js",
      "line": 15,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-landing']",
      "class": "FountainHead.Header"
    },
    {
      "file": "addon/components/fountain-head/docs/class.js",
      "line": 15,
      "description": "Class model content.",
      "itemtype": "property",
      "name": "class",
      "type": "{Object}",
      "class": "FountainHead.Class"
    },
    {
      "file": "addon/components/fountain-head/docs/file.js",
      "line": 12,
      "description": "JSON stringified file generated by documentation script.",
      "itemtype": "property",
      "name": "file",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.File"
    },
    {
      "file": "addon/components/fountain-head/docs/footer.js",
      "line": 14,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-addon-footer']",
      "class": "FountainHead.Docs.Github"
    },
    {
      "file": "addon/components/fountain-head/docs/footer.js",
      "line": 20,
      "itemtype": "property",
      "name": "tagName",
      "type": "{string}",
      "default": "'footer'",
      "class": "FountainHead.Docs.Github"
    },
    {
      "file": "addon/components/fountain-head/docs/github.js",
      "line": 14,
      "description": "Repository URL from fountainhead configurations. If a URL has been specified\nin the configs or the `package.json` this github logo will show with a link\nto the repo",
      "itemtype": "property",
      "name": "repository",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Docs.Github"
    },
    {
      "file": "addon/components/fountain-head/docs/header.js",
      "line": 17,
      "description": "Project name used as docs `<h1>`",
      "itemtype": "property",
      "name": "projectName",
      "type": "{string}",
      "class": "FountainHead.Module"
    },
    {
      "file": "addon/components/fountain-head/docs/header.js",
      "line": 23,
      "description": "Project url, pulled from repository in `fountainhead.js` config or `package.json`",
      "itemtype": "property",
      "name": "projectUrl",
      "type": "{string}",
      "class": "FountainHead.Module"
    },
    {
      "file": "addon/components/fountain-head/docs/header.js",
      "line": 29,
      "description": "Project logo, pulled from configs",
      "itemtype": "property",
      "name": "logo",
      "type": "{string}",
      "class": "FountainHead.Module"
    },
    {
      "file": "addon/components/fountain-head/docs/header.js",
      "line": 39,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-addon-header']",
      "class": "FountainHead.Module"
    },
    {
      "file": "addon/components/fountain-head/docs/header.js",
      "line": 45,
      "itemtype": "property",
      "name": "tagName",
      "type": "{string}",
      "default": "'header'",
      "class": "FountainHead.Module"
    },
    {
      "file": "addon/components/fountain-head/docs/module.js",
      "line": 13,
      "description": "Module model content",
      "itemtype": "property",
      "name": "module",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Module"
    },
    {
      "file": "addon/components/fountain-head/docs/module.js",
      "line": 24,
      "description": "Handle nulling out properties `submodules` and `classes` if they don't have\nany keys.",
      "itemtype": "event",
      "name": "didReceiveAttrs",
      "class": "FountainHead.Module"
    },
    {
      "file": "addon/components/fountain-head/docs/sidebar.js",
      "line": 18,
      "description": "Fountainhead meta passed from service. Used to calculate `stringForAriaHidden`\nto hide sidebar when there is no data.",
      "itemtype": "property",
      "name": "meta",
      "type": "{?Object}",
      "default": "null",
      "class": "FountainHead.Docs.Sidebar"
    },
    {
      "file": "addon/components/fountain-head/docs/sidebar.js",
      "line": 30,
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "{Array}",
      "default": "['stringForAriaHidden:aria-hidden']",
      "class": "FountainHead.Docs.Sidebar"
    },
    {
      "file": "addon/components/fountain-head/docs/sidebar.js",
      "line": 36,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-sidebar']",
      "class": "FountainHead.Docs.Sidebar"
    },
    {
      "file": "addon/components/fountain-head/docs/sidebar.js",
      "line": 42,
      "itemtype": "property",
      "name": "tagName",
      "type": "{string}",
      "default": "'nav'",
      "class": "FountainHead.Docs.Sidebar"
    },
    {
      "file": "addon/components/fountain-head/docs/sidebar.js",
      "line": 52,
      "description": "Fountainhead meta is passed into the sidebar. When there is no data, then\nwe haven't run the documentation scripts yet, so we need to hide the sidebar\nusing aria-hidden. Convert presence of meta data to string of boolean that\ncan be used for aria-hidden",
      "itemtype": "property",
      "name": "stringForAriaHidden",
      "type": "{string}",
      "return": {
        "description": "Returns either string of `true` or `false` dependent on\n                 presence of meta",
        "type": "String"
      },
      "class": "FountainHead.Docs.Sidebar",
      "subprops": [
        {
          "name": "meta",
          "description": "Fountainhead meta passed from service",
          "type": "Object"
        }
      ]
    },
    {
      "file": "addon/components/fountain-head/docs/sidebar.js",
      "line": 71,
      "description": "Method to filter on doc elements for search.",
      "itemtype": "method",
      "name": "doFilter",
      "params": [
        {
          "name": "query",
          "description": "The search query to filter on",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Undefined"
      },
      "class": "FountainHead.Docs.Sidebar"
    },
    {
      "file": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "line": 13,
      "description": "File path to svg definitions file",
      "itemtype": "property",
      "name": "filePath",
      "type": "{string}",
      "default": "assets/svg-defs.svg",
      "class": "FountainHead.Shared.CoreSVG"
    },
    {
      "file": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "line": 20,
      "description": "The id of the svg.",
      "itemtype": "property",
      "name": "svgId",
      "type": "{string}",
      "class": "FountainHead.Shared.CoreSVG"
    },
    {
      "file": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "line": 30,
      "description": "Allow direct binding of `data-test` attributes so that icons can be\ndirectly targeted in automated testing.",
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "{Array}",
      "class": "FountainHead.Shared.CoreSVG"
    },
    {
      "file": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "line": 38,
      "description": "Class names: `core-svg`",
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "class": "FountainHead.Shared.CoreSVG"
    },
    {
      "file": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "line": 44,
      "description": "Bound classNames: `svgId`",
      "itemtype": "property",
      "name": "classNameBindings",
      "type": "{Array}",
      "class": "FountainHead.Shared.CoreSVG"
    },
    {
      "file": "addon/components/fountain-head/shared/fountainhead-svg.js",
      "line": 50,
      "description": "SVG DOM element",
      "itemtype": "property",
      "name": "tagName",
      "type": "{string}",
      "class": "FountainHead.Shared.CoreSVG"
    },
    {
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 19,
      "description": "The string that should be converted to a partial",
      "itemtype": "property",
      "name": "description",
      "type": "{string}",
      "default": "''",
      "class": "FountainHead.Shared.RuntimeDescription"
    },
    {
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 30,
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "default": "['fh-description']",
      "class": "FountainHead.Shared.RuntimeDescription"
    },
    {
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 36,
      "description": "Name of generated partial that is used in the template.",
      "itemtype": "property",
      "name": "partialName",
      "type": "{string}",
      "class": "FountainHead.Shared.RuntimeDescription"
    },
    {
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 46,
      "description": "Looks through the passed-in template string and checks for action helpers;\nwhen it finds some, it checks for the actions referenced and registers no-ops\nfor them on this component's context so that the application doesn't explode\nwhen trying to reference a non-existent action.",
      "itemtype": "method",
      "name": "_checkActionRefs",
      "params": [
        {
          "name": "templateString",
          "description": "The template string to run the check for action matches on",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Undefined"
      },
      "class": "FountainHead.Shared.RuntimeDescription"
    },
    {
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 80,
      "description": "Grabs the input from the parent instance's code editor, compiles it into a\nreal-live HTMLBars template, registers it on the container as a partial\nand makes it available as output for the preview component's template to\nrender.\n\nNew partials are created for every change, using a date string as the\npartial name to avoid collisions.\n\nTODO: Use lookup partial names that can be mapped and retrieved instead of\nmaking new ones each time",
      "itemtype": "method",
      "name": "_generateDescription",
      "params": [
        {
          "name": "templateString",
          "description": "String to generate template from",
          "type": "String"
        }
      ],
      "class": "FountainHead.Shared.RuntimeDescription"
    },
    {
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 115,
      "description": "On init we map the passed `contextActions` to real actions in this\ncomponent's actions hash to ensure they're available at compile time.",
      "itemtype": "method",
      "name": "init",
      "class": "FountainHead.Shared.RuntimeDescription"
    },
    {
      "file": "addon/components/fountain-head/shared/runtime-description.js",
      "line": 139,
      "description": "Whenever attrs are received fire the `_generateDescription` method to\ngenerate a partial that will be rendered.",
      "itemtype": "event",
      "name": "didReceiveAttrs",
      "params": [
        {
          "name": "attrs",
          "description": "Ember attrs object",
          "type": "Object",
          "props": [
            {
              "name": "newAttrs",
              "description": "The new attrs received",
              "type": "Object"
            }
          ]
        }
      ],
      "class": "FountainHead.Shared.RuntimeDescription"
    },
    {
      "file": "addon/routes/docs/classes.js",
      "line": 14,
      "description": "Fetches class' JSON at: `${this.get('fountainhead.apiNamespace')}/classes/${params.class_id}.json`",
      "itemtype": "method",
      "name": "model",
      "params": [
        {
          "name": "params",
          "description": "",
          "type": "Object",
          "props": [
            {
              "name": "class_id",
              "description": "Name of this class, use to fetch data",
              "type": "String"
            }
          ]
        }
      ],
      "return": {
        "description": "jQuery ajax promise",
        "type": "Promise"
      },
      "class": "Docs.Classes"
    },
    {
      "file": "addon/routes/docs/classes.js",
      "line": 28,
      "description": "Reset page scroll on any transition. Note that Fountainhead is inside of\na fake page, so we scroll that instead of the body",
      "itemtype": "event",
      "name": "didTransition",
      "class": "Docs.Classes"
    },
    {
      "file": "addon/routes/docs/files.js",
      "line": 14,
      "description": "Fetches file's JSON at: `${this.get('fountainhead.apiNamespace')}/files/${params.file_id}.json`",
      "itemtype": "method",
      "name": "model",
      "params": [
        {
          "name": "params",
          "description": "",
          "type": "Object",
          "props": [
            {
              "name": "file_id",
              "description": "Name of this class, use to fetch data",
              "type": "String"
            }
          ]
        }
      ],
      "return": {
        "description": "jQuery ajax promise",
        "type": "Promise"
      },
      "class": "Docs.Files"
    },
    {
      "file": "addon/routes/docs/files.js",
      "line": 28,
      "description": "Reset page scroll on any transition. Note that Fountainhead is inside of\na fake page, so we scroll that instead of the body",
      "itemtype": "event",
      "name": "didTransition",
      "class": "Docs.Files"
    },
    {
      "file": "addon/routes/docs/modules.js",
      "line": 14,
      "description": "Fetches modules's JSON at: `${this.get('fountainhead.apiNamespace')}/modules/${params.file_id}.json`",
      "itemtype": "method",
      "name": "model",
      "params": [
        {
          "name": "params",
          "description": "",
          "type": "Object",
          "props": [
            {
              "name": "module_id",
              "description": "Name of this class, use to fetch data",
              "type": "String"
            }
          ]
        }
      ],
      "return": {
        "description": "jQuery ajax promise",
        "type": "Promise"
      },
      "class": "Docs.Modules"
    },
    {
      "file": "addon/routes/docs/modules.js",
      "line": 28,
      "description": "Reset page scroll on any transition. Note that Fountainhead is inside of\na fake page, so we scroll that instead of the body",
      "itemtype": "event",
      "name": "didTransition",
      "class": "Docs.Modules"
    },
    {
      "file": "addon/services/fountainhead.js",
      "line": 18,
      "description": "All Fountainhead API requests are prefixed with this namespace. If you\nexport your docs JSON files to a non-default location, or your application\nis served under a namespace you can overwrite this property to match your\nendpoint's root url namespace.",
      "itemtype": "property",
      "name": "apiNamespace",
      "type": "{string}",
      "default": "'/docs'",
      "class": "Fountainhead"
    },
    {
      "file": "addon/services/fountainhead.js",
      "line": 28,
      "description": "Documentation meta fetched from `/meta.json`. Contains high level map\nof modules and classes available in documentation. Used for sidebar and\nmapping item and return types.\nThis property is initialized to null so that the sidebar has an explicit\nvalue to bind aria-hidden to. When there is no meta, there is no sidebar.",
      "itemtype": "property",
      "name": "meta",
      "type": "{?Object}",
      "default": "null",
      "class": "Fountainhead"
    },
    {
      "file": "addon/services/fountainhead.js",
      "line": 39,
      "description": "Flag used by docs route to show getting started instructions if the call for\ndocumentation meta fails.",
      "itemtype": "property",
      "name": "metaError",
      "type": "{Boolean}",
      "default": "false",
      "class": "Fountainhead"
    },
    {
      "file": "addon/services/fountainhead.js",
      "line": 51,
      "description": "When this service is loaded, handle fetching documentation meta data that\ndrives the sidebar && header. If there is an error we know tha we haven't\ngenerated documentation yet. The docs template will pick up the error and\ndisplay the getting started instructions.\n\nNOTE: the meta request needs to be wrapped in a `run.next` so that if a\nconsuming application needs to override the `apiNamespace` the meta call\nis made with the new namespace. Without the run loop, attempting to set\nthe namespace will initialize this service and call for meta before the\nnamespace update is complete and the request will use the default `/docs`\nnamespace.",
      "itemtype": "method",
      "name": "init",
      "class": "Fountainhead"
    },
    {
      "file": "app/instance-initializers/fountainhead-routes.js",
      "line": 23,
      "description": "Initialize route that is called by consuming Ember application\n`Router` instance from the consuming application can directly mapped.",
      "itemtype": "method",
      "name": "initialize",
      "return": {
        "description": "",
        "type": "Undefined"
      },
      "class": "FountainheadRoutes",
      "module": "App"
    },
    {
      "file": "blueprints/ember-fountainhead/index.js",
      "line": 31,
      "description": "After install of addon read in consuming application's gitignore. If there\nisn't an entry for `vendor/feature-flags.js`, use node `fs` to append it.",
      "itemtype": "method",
      "name": "afterInstall",
      "return": {
        "description": "",
        "type": "Undefined"
      },
      "class": "EmberFountainhead.Index",
      "module": "Blueprints"
    },
    {
      "file": "lib/create-dirs.js",
      "line": 19,
      "description": "Synchronous mkdir that handles creating a potentially nested directory",
      "itemtype": "method",
      "name": "mkdirSync",
      "params": [
        {
          "name": "dirPath",
          "description": "Directory path to create, can be nested",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Undefined"
      },
      "class": "createDirs",
      "module": "Lib"
    },
    {
      "file": "lib/decorate-config.js",
      "line": 21,
      "description": "Configuration entry should be an array of directory paths (YUIDoc can't\nparse individual files unfortunately). The default entry is `app` when the\nconsumer is an application and `addon` when the consumer is an addon.",
      "itemtype": "property",
      "name": "entry",
      "type": "{Array}",
      "default": "['app'] | ['addon']",
      "class": "decorateConfig",
      "module": "Lib"
    },
    {
      "file": "lib/decorate-config.js",
      "line": 29,
      "description": "Configuration output path should be a directory path. The default is `public/docs`\nwhen the consumer is an application and `tests/dummy/public/docs` when the\nconsumer is an addon (Outputting the docs to `/public` in an addon signals\nEmber CLI to bundle your docs into any consuming applications `/public` dir\nwhich is not the default behavior we want).",
      "itemtype": "property",
      "name": "outputPath",
      "type": "{string}",
      "default": "'public/docs' | 'tests/dummy/public/docs'",
      "class": "decorateConfig",
      "module": "Lib"
    },
    {
      "file": "lib/generate-fountainhead-data.js",
      "line": 38,
      "description": "Call to handle saving data to a file. Requires a file path and data to save.\nIf data is not a string, it will be stringified",
      "itemtype": "method",
      "name": "saveObjectToJSON",
      "params": [
        {
          "name": "filePath",
          "description": "Path to save file at",
          "type": "String"
        },
        {
          "name": "data",
          "description": "Data to save in file",
          "type": "Object|string"
        }
      ],
      "return": {
        "description": "True for successful operation, false for failures",
        "type": "Boolean"
      },
      "class": "generateFountainheadData",
      "module": "Lib"
    },
    {
      "file": "lib/generate-fountainhead-data.js",
      "line": 63,
      "description": "The `docsMeta` object is the guide for the documentation data. It contains\ndescriptions of the project as well as arrays of module and class routing\ninformation",
      "itemtype": "property",
      "name": "docsMeta",
      "type": "{Object}",
      "class": "generateFountainheadData",
      "module": "Lib"
    },
    {
      "file": "lib/index.js",
      "line": 34,
      "description": "Optional configs pulled from `fountainhead.js`",
      "itemtype": "property",
      "name": "fountainheadConfig",
      "type": "{Object}",
      "class": "Index",
      "module": "Lib"
    },
    {
      "file": "lib/index.js",
      "line": 39,
      "description": "Package JSON for project. Used to populate project description if not\ndefined in `fountainhead.js` config.",
      "itemtype": "property",
      "name": "packageJSON",
      "type": "{Object}",
      "class": "Index",
      "module": "Lib"
    },
    {
      "file": "lib/index.js",
      "line": 68,
      "description": "Raw YUIDoc JSON data generated using constructor exported by `yuidocjs`.\nCall new with options from config to pass configs to YUIDoc and call `run`\nto generate JSON",
      "itemtype": "property",
      "name": "yuidocJSON",
      "type": "{Object}",
      "class": "Index",
      "module": "Lib"
    }
  ],
  "warnings": []
}