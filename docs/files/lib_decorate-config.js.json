{
  "file": "lib/decorate-config.js",
  "content": "<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript}\"><span aria-hidden=\"true\" role=\"presentation\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Handle adding default values to config and validating required properties\n * are present\n * @class decorateConfig\n * @constructor\n * @param {Object} config      Project configuration file\n * @param {Object} packageJSON Project package.json file\n * @return {Object} Fully decorated and validated project configuration file\n */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decorateConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> packageJSON<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Setup Default Configs</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Define default configurations for entry &amp;&amp; output based on if consumer is</span>\n  <span class=\"token comment\" spellcheck=\"true\">// an addon or application</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Configuration entry should be an array of directory paths (YUIDoc can't\n   * parse individual files unfortunately). The default entry is `app` when the\n   * consumer is an application and `addon` when the consumer is an addon.\n   * @property entry\n   * @type {Array}\n   * @default ['app'] | ['addon']\n   */</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Configuration output path should be a directory path. The default is `public/docs`\n   * when the consumer is an application and `tests/dummy/public/docs` when the\n   * consumer is an addon (Outputting the docs to `/public` in an addon signals\n   * Ember CLI to bundle your docs into any consuming applications `/public` dir\n   * which is not the default behavior we want).\n   * @property outputPath\n   * @type {string}\n   * @default 'public/docs' | 'tests/dummy/public/docs'\n   */</span>\n  <span class=\"token keyword\">let</span> entry<span class=\"token punctuation\">,</span> outputPath<span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\" spellcheck=\"true\">// Addons should have the entry 'ember-addon' in their package keywords</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>packageJSON<span class=\"token punctuation\">.</span>keywords <span class=\"token operator\">&amp;&amp;</span> packageJSON<span class=\"token punctuation\">.</span>keywords<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ember-addon'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'addon'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    outputPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tests'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dummy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'docs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    outputPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'docs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> defaultConfigurations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    entry<span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'fountainhead-data.json'</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token punctuation\">:</span> outputPath\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Merge Defaults with Consumer Defined Configs</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Use .assign to set defaults for any missing configs</span>\n  config <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>defaultConfigurations<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// YUIDoc expects an array of entries, Wrap single entry in an array</span>\n  config<span class=\"token punctuation\">.</span>entry <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>entry <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">?</span> config<span class=\"token punctuation\">.</span>entry <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>config<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Validate config repository</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>repository <span class=\"token operator\">&amp;&amp;</span> packageJSON<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span>repository <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">typeof</span> packageJSON<span class=\"token punctuation\">.</span>repository <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> packageJSON<span class=\"token punctuation\">.</span>repository <span class=\"token punctuation\">:</span> packageJSON<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Populate with package data where possible</span>\n  config<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> packageJSON<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  config<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>description <span class=\"token operator\">||</span> packageJSON<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">;</span>\n  config<span class=\"token punctuation\">.</span>version <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>version <span class=\"token operator\">||</span> packageJSON<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// TODO: Logging to console if some basic configs aren't set</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>"
}