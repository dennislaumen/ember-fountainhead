{
  "file": "lib/generate-fountainhead-data.js",
  "content": "<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript}\"><span aria-hidden=\"true\" role=\"presentation\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> generateClasses <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data-types/generate-classes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> generateModules <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data-types/generate-modules'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> generateSrcFile <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data-types/generate-src-file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * This module handles coordinating parsing/reading/saving all of the individual\n * Fountainhead data files after the configs have been validated and the raw\n * YUIDoc data has been generated.\n *\n * Module should:\n * - create and populate `docsMeta` that will be saved as `meta.json`\n * - generate decorated modules files\n * - generate decorated class files\n * - generate decorated src file files\n *\n * NOTE: When switching doc generation from an executable to a function call\n * all file operations had to be changed to a synchronous operation b/c the ember\n * command finishes before the async file operations are complete and the contents\n * are not written to file. This can be switched back to an async method by\n * assembling and returning a promise.all for all async file calls\n *\n * @class generateFountainheadData\n * @constructor\n * @uses DataTypes.GenerateModules\n * @uses DataTypes.GenerateClasses\n * @uses DataTypes.GenerateSrcFile\n * @param {Object} config     Project configuration file\n * @param {Object} yuidocJSON Raw yuidoc generated documentation JSON\n * @return {undefined}\n */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateFountainheadData</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> yuidocJSON<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Call to handle saving data to a file. Requires a file path and data to save.\n   * If data is not a string, it will be stringified\n   * @method saveObjectToJSON\n   * @param {string}        filePath Path to save file at\n   * @param {Object|string} data     Data to save in file\n   * @return {boolean} True for successful operation, false for failures\n   */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">saveObjectToJSON</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      data <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to save class JSON'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// NOTE: ASYNC REQUIRES PROMISIFYING ALL OPERATIONS</span>\n    <span class=\"token comment\" spellcheck=\"true\">// fs.writeFile(filePath, data, err => {</span>\n    <span class=\"token comment\" spellcheck=\"true\">//   if (err) { console.warn(`Unable to save ${filePath}`); }</span>\n    <span class=\"token comment\" spellcheck=\"true\">// });</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Create meta object for docs that gets saved as `meta.json`</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * The `docsMeta` object is the guide for the documentation data. It contains\n   * descriptions of the project as well as arrays of module and class routing\n   * information\n   * @property docsMeta\n   * @type {Object}\n   */</span>\n  <span class=\"token keyword\">let</span> docsMeta <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    parser<span class=\"token punctuation\">:</span> <span class=\"token string\">'YUIDoc'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// We may support JSDoc someday</span>\n    namespaces<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    description<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">,</span>\n    version<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">,</span>\n    repository<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">,</span>\n    logo<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>logo\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Save raw data, Ember command exits before YUIDoc module finishes file writing</span>\n  <span class=\"token function\">saveObjectToJSON</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'yuidoc-data.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    yuidocJSON\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Parse Modules</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n  <span class=\"token keyword\">const</span> modulesData <span class=\"token operator\">=</span> <span class=\"token function\">generateModules</span><span class=\"token punctuation\">(</span>yuidocJSON<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Update addon meta</span>\n  docsMeta<span class=\"token punctuation\">.</span>modules <span class=\"token operator\">=</span> modulesData<span class=\"token punctuation\">.</span>modulesMeta<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Save each module</span>\n  modulesData<span class=\"token punctuation\">.</span>modulesDatas<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>moduleData <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">saveObjectToJSON</span><span class=\"token punctuation\">(</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'modules'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>moduleData<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      moduleData\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Parse Classes and Class Items</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n  <span class=\"token keyword\">const</span> classesData <span class=\"token operator\">=</span> <span class=\"token function\">generateClasses</span><span class=\"token punctuation\">(</span>yuidocJSON<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">,</span> yuidocJSON<span class=\"token punctuation\">.</span>classitems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Update addon meta</span>\n  docsMeta<span class=\"token punctuation\">.</span>classes <span class=\"token operator\">=</span> classesData<span class=\"token punctuation\">.</span>classesMeta<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Save each class &amp;&amp; save class' source file</span>\n  classesData<span class=\"token punctuation\">.</span>classesDatas<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>classData <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fileContents<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">saveObjectToJSON</span><span class=\"token punctuation\">(</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'classes'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>classData<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      classData\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// If a class doesn't have a file somehow don't attempt to read the src</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>classData<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      fileContents <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>classData<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Failed to read file: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>classData<span class=\"token punctuation\">.</span>file<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">saveObjectToJSON</span><span class=\"token punctuation\">(</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'files'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>classData<span class=\"token punctuation\">.</span>srcFileId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> file<span class=\"token punctuation\">:</span> classData<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token function\">generateSrcFile</span><span class=\"token punctuation\">(</span>fileContents<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// NOTE: ASYNC REQUIRES PROMISIFYING ALL OPERATIONS</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Read file contents and apply syntax highlighting</span>\n    <span class=\"token comment\" spellcheck=\"true\">// fs.readFile(path.resolve(classData.file), { encoding: 'utf8' }, (err, fileContents) => {</span>\n    <span class=\"token comment\" spellcheck=\"true\">//   if (err) { return console.warn(`Unable to save file: ${classData.file}`); }</span>\n    <span class=\"token comment\" spellcheck=\"true\">//</span>\n    <span class=\"token comment\" spellcheck=\"true\">//   saveObjectToJSON(</span>\n    <span class=\"token comment\" spellcheck=\"true\">//     path.join(output.path, 'files', `${classData.srcFileId}.json`),</span>\n    <span class=\"token comment\" spellcheck=\"true\">//     { file: classData.file, content: generateSrcFile(fileContents) }</span>\n    <span class=\"token comment\" spellcheck=\"true\">//   );</span>\n    <span class=\"token comment\" spellcheck=\"true\">// });</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Save Fountainhead Master and Meta Data Files</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ========================================================</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/*\n   * SHABANGLE!!! Documentation files have been generated and saved. Finish\n   * generating fountainhead data by saving master data file and documentation\n   * meta file\n   */</span>\n  <span class=\"token function\">saveObjectToJSON</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    yuidocJSON\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">saveObjectToJSON</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'meta.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    docsMeta\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>"
}