{
  "name": "parseMarkdown",
  "shortname": "parseMarkdown",
  "classitems": [
    {
      "file": "lib/parse-markdown.js",
      "line": 43,
      "description": "<p>Scans the description text for instances of markdown code blocks flagged\nas <code>'glimmer'</code> syntax. If any such instances are found, they are copied,\nstripped of their triple backticks and re-inserted into the\n<code>templateString</code> immediately after the original declaration. This allows\nfor functional copies of your code examples to be automatically rendered\ninto the description, without having to duplicate the code block itself.</p>\n<p>If your functional code needs to have different setup to work correctly in\nthe Fountainhead context (for example, if you need to use <code>core-state</code> to\nset up sandboxed state and controls), simply use <code>'handlebars'</code> or no\nsyntax flag, and manually add the code block you want Fountainhead to\nrender after your example. Neato!</p>\n",
      "itemtype": "method",
      "name": "_renderCodeBlocks",
      "params": [
        {
          "name": "description",
          "description": "<p>The description text to scan for code blocks</p>\n",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "String"
      },
      "class": "parseMarkdown",
      "module": "Lib",
      "srcFileId": "lib_parse-markdown.js"
    }
  ],
  "plugins": [],
  "extensions": [],
  "plugin_for": [],
  "extension_for": [],
  "module": "Lib",
  "namespace": "",
  "file": "lib/parse-markdown.js",
  "line": 11,
  "description": "<p>Handle parsing markdown using <a href=\"http://prismjs.com/\">Prism</a></p>\n",
  "is_constructor": 1,
  "params": [
    {
      "name": "description",
      "description": "Markdown string to parse",
      "type": "String"
    }
  ],
  "return": {
    "description": "HTML string parsed from passed markdown",
    "type": "String"
  },
  "method": [
    {
      "file": "lib/parse-markdown.js",
      "line": 43,
      "description": "<p>Scans the description text for instances of markdown code blocks flagged\nas <code>'glimmer'</code> syntax. If any such instances are found, they are copied,\nstripped of their triple backticks and re-inserted into the\n<code>templateString</code> immediately after the original declaration. This allows\nfor functional copies of your code examples to be automatically rendered\ninto the description, without having to duplicate the code block itself.</p>\n<p>If your functional code needs to have different setup to work correctly in\nthe Fountainhead context (for example, if you need to use <code>core-state</code> to\nset up sandboxed state and controls), simply use <code>'handlebars'</code> or no\nsyntax flag, and manually add the code block you want Fountainhead to\nrender after your example. Neato!</p>\n",
      "itemtype": "method",
      "name": "_renderCodeBlocks",
      "params": [
        {
          "name": "description",
          "description": "<p>The description text to scan for code blocks</p>\n",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "String"
      },
      "class": "parseMarkdown",
      "module": "Lib",
      "srcFileId": "lib_parse-markdown.js"
    }
  ],
  "property": [],
  "event": [],
  "srcFileId": "lib_parse-markdown.js"
}